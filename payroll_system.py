
"""
Simple Payroll System (Tkinter GUI)
- Enter employee info, hours worked, rate, overtime, deductions
- Calculates gross pay, net pay
- Save payslip to CSV and individual text file
- Sample/test button fills example values for quick testing

How to run:
1. Save this file as payroll_system.py
2. Run: python payroll_system.py
(Requires Python 3; no external packages required)

Author: Generated by ChatGPT (example)
"""

import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import csv
from datetime import datetime
import os

APP_TITLE = "Simple Payroll System"

CSV_FILE = "payslips.csv"

def ensure_csv_headers():
    if not os.path.exists(CSV_FILE):
        with open(CSV_FILE, mode="w", newline="", encoding="utf-8") as f:
            writer = csv.writer(f)
            writer.writerow(["timestamp","employee_name","employee_id","position","payment_method",
                             "hours","rate","overtime_hours","overtime_rate","gross_pay","deductions","net_pay"])

def calc_pay(hours, rate, ot_hours, deduction):
    # Basic calculations
    regular_pay = hours * rate
    overtime_rate = rate * 1.5  # standard 1.5x overtime
    overtime_pay = ot_hours * overtime_rate
    gross = regular_pay + overtime_pay
    net = gross - deduction
    return gross, overtime_rate, net

class PayrollApp(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title(APP_TITLE)
        self.geometry("720x520")
        self.resizable(False, False)

        self.create_widgets()
        ensure_csv_headers()

    def create_widgets(self):
        frame = ttk.Frame(self, padding=12)
        frame.pack(fill="both", expand=True)

        # Employee info
        info_label = ttk.Label(frame, text="Employee Information", font=("Segoe UI", 12, "bold"))
        info_label.grid(row=0, column=0, columnspan=4, sticky="w", pady=(0,8))

        ttk.Label(frame, text="Employee Name:").grid(row=1, column=0, sticky="e")
        self.entry_name = ttk.Entry(frame, width=30)
        self.entry_name.grid(row=1, column=1, sticky="w", padx=(6,20))

        ttk.Label(frame, text="Employee ID:").grid(row=1, column=2, sticky="e")
        self.entry_id = ttk.Entry(frame, width=18)
        self.entry_id.grid(row=1, column=3, sticky="w", padx=(6,0))

        ttk.Label(frame, text="Position:").grid(row=2, column=0, sticky="e")
        self.entry_position = ttk.Entry(frame, width=30)
        self.entry_position.grid(row=2, column=1, sticky="w", padx=(6,20))

        # Payment method
        ttk.Label(frame, text="Payment Method:").grid(row=2, column=2, sticky="e")
        self.payment_var = tk.StringVar(value="Cash")
        payment_combo = ttk.Combobox(frame, textvariable=self.payment_var, values=["Cash","Bank Transfer","Check"], state="readonly", width=15)
        payment_combo.grid(row=2, column=3, sticky="w", padx=(6,0))

        # Work & pay inputs
        ttk.Separator(frame, orient="horizontal").grid(row=3, column=0, columnspan=4, sticky="ew", pady=10)

        ttk.Label(frame, text="Hours Worked:").grid(row=4, column=0, sticky="e")
        self.entry_hours = ttk.Entry(frame, width=12)
        self.entry_hours.grid(row=4, column=1, sticky="w", padx=(6,20))

        ttk.Label(frame, text="Rate per Hour:").grid(row=4, column=2, sticky="e")
        self.entry_rate = ttk.Entry(frame, width=12)
        self.entry_rate.grid(row=4, column=3, sticky="w", padx=(6,0))

        ttk.Label(frame, text="Overtime Hours:").grid(row=5, column=0, sticky="e")
        self.entry_ot = ttk.Entry(frame, width=12)
        self.entry_ot.grid(row=5, column=1, sticky="w", padx=(6,20))

        ttk.Label(frame, text="Deductions (Total):").grid(row=5, column=2, sticky="e")
        self.entry_deduction = ttk.Entry(frame, width=12)
        self.entry_deduction.grid(row=5, column=3, sticky="w", padx=(6,0))

        # Buttons
        calc_btn = ttk.Button(frame, text="Calculate Payslip", command=self.calculate)
        calc_btn.grid(row=6, column=0, pady=14)

        save_btn = ttk.Button(frame, text="Save Payslip", command=self.save_payslip)
        save_btn.grid(row=6, column=1, pady=14)

        sample_btn = ttk.Button(frame, text="Fill Sample Data", command=self.fill_sample)
        sample_btn.grid(row=6, column=2, pady=14)

        clear_btn = ttk.Button(frame, text="Clear Fields", command=self.clear_fields)
        clear_btn.grid(row=6, column=3, pady=14)

        # Payslip display area
        ttk.Label(frame, text="Payslip Preview", font=("Segoe UI", 12, "bold")).grid(row=7, column=0, columnspan=4, sticky="w", pady=(6,8))
        self.payslip_text = tk.Text(frame, height=12, width=82, state="disabled", wrap="word")
        self.payslip_text.grid(row=8, column=0, columnspan=4, pady=(0,6))

    def calculate(self):
        try:
            name = self.entry_name.get().strip()
            emp_id = self.entry_id.get().strip()
            position = self.entry_position.get().strip()
            hours = float(self.entry_hours.get() or 0)
            rate = float(self.entry_rate.get() or 0)
            ot = float(self.entry_ot.get() or 0)
            deduction = float(self.entry_deduction.get() or 0)
        except ValueError:
            messagebox.showerror("Invalid input", "Please enter numeric values for hours, rate, overtime, and deductions.")
            return

        gross, ot_rate, net = calc_pay(hours, rate, ot, deduction)
        payment_method = self.payment_var.get()
        ts = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        payslip = f"""
Timestamp: {ts}
Employee: {name}    ID: {emp_id}
Position: {position}
Payment method: {payment_method}

Hours worked: {hours}
Rate per hour: {rate:.2f}
Overtime hours: {ot}  (OT rate: {ot_rate:.2f})

Gross pay: {gross:.2f}
Deductions: {deduction:.2f}

NET PAY: {net:.2f}
"""
        self.current_record = {
            "timestamp": ts,
            "employee_name": name,
            "employee_id": emp_id,
            "position": position,
            "payment_method": payment_method,
            "hours": hours,
            "rate": rate,
            "overtime_hours": ot,
            "overtime_rate": ot_rate,
            "gross_pay": gross,
            "deductions": deduction,
            "net_pay": net
        }

        self.payslip_text.config(state="normal")
        self.payslip_text.delete("1.0", "end")
        self.payslip_text.insert("1.0", payslip.strip())
        self.payslip_text.config(state="disabled")

    def save_payslip(self):
        if not hasattr(self, "current_record"):
            messagebox.showwarning("Calculate first", "Please calculate the payslip before saving.")
            return
        rec = self.current_record
        # Save to CSV
        with open(CSV_FILE, mode="a", newline="", encoding="utf-8") as f:
            writer = csv.writer(f)
            writer.writerow([rec["timestamp"], rec["employee_name"], rec["employee_id"], rec["position"],
                             rec["payment_method"], rec["hours"], rec["rate"], rec["overtime_hours"],
                             rec["overtime_rate"], rec["gross_pay"], rec["deductions"], rec["net_pay"]])
        # Save individual text file
        safe_name = rec["employee_name"].replace(" ", "_") or "employee"
        fname = f"payslip_{safe_name}_{rec['timestamp'].replace(':','-').replace(' ','_')}.txt"
        with open(fname, "w", encoding="utf-8") as tf:
            tf.write(self.payslip_text.get("1.0", "end").strip())
        messagebox.showinfo("Saved", f"Payslip saved to {CSV_FILE} and file {fname} in current folder.")

    def fill_sample(self):
        # Fill with example values for quick testing
        self.entry_name.delete(0,"end"); self.entry_name.insert(0,"Juan Dela Cruz")
        self.entry_id.delete(0,"end"); self.entry_id.insert(0,"EMP-001")
        self.entry_position.delete(0,"end"); self.entry_position.insert(0,"Cashier")
        self.entry_hours.delete(0,"end"); self.entry_hours.insert(0,"160")
        self.entry_rate.delete(0,"end"); self.entry_rate.insert(0,"60")
        self.entry_ot.delete(0,"end"); self.entry_ot.insert(0,"10")
        self.entry_deduction.delete(0,"end"); self.entry_deduction.insert(0,"1500")
        self.payment_var.set("Bank Transfer")
        self.calculate()

    def clear_fields(self):
        for w in [self.entry_name, self.entry_id, self.entry_position, self.entry_hours, self.entry_rate, self.entry_ot, self.entry_deduction]:
            w.delete(0,"end")
        self.payment_var.set("Cash")
        self.payslip_text.config(state="normal")
        self.payslip_text.delete("1.0","end")
        self.payslip_text.config(state="disabled")
        if hasattr(self, "current_record"):
            del self.current_record

if __name__ == "__main__":
    app = PayrollApp()
    app.mainloop()
